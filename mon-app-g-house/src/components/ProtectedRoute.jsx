import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

/**
 * Composant de protection de route.
 * @param {string} [allowedRole=null] - Le r√¥le requis pour acc√©der √† la route ('tenant' ou 'landlord').
 * @returns {JSX.Element} L'√©l√©ment enfant (Outlet) si autoris√©, ou une redirection.
 */
const ProtectedRoute = ({ allowedRole = null }) => {
  const { isLoggedIn, role, isLoading } = useAuth();

  // 1. üîë CL√â DE LA CORRECTION : Attendre le chargement initial du contexte
  // Tant que isLoading est √† true, on affiche un message de chargement.
  // Cela emp√™che la redirection pr√©matur√©e vers /login.
  if (isLoading) {
    return <div className="loading-screen">V√©rification de l'authentification en cours...</div>; 
  }

  // 2. V√©rifier si l'utilisateur est connect√©
  if (!isLoggedIn) {
    // Si la v√©rification est termin√©e (isLoading est false) et l'utilisateur n'est pas connect√©
    return <Navigate to="/login" replace />; 
  }

  // 3. V√©rifier le r√¥le si un r√¥le sp√©cifique est requis
  if (allowedRole && role !== allowedRole) {
    // Acc√®s refus√©
    console.warn(`Acc√®s refus√©. R√¥le actuel: ${role}, R√¥le requis: ${allowedRole}`);
    return <Navigate to="/" replace />; 
  }

  // 4. L'utilisateur est connect√© et autoris√© : Afficher le contenu
  return <Outlet />;
};

export default ProtectedRoute;